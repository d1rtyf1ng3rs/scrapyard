== SNIPPETS ==

// Серега's xdebug hotkeys
/*
	javascript:(function(){document.cookie='XDEBUG_SESSION='+'PHPSTORM'+';path=/;';})()
	javascript:(function(){document.cookie='XDEBUG_SESSION='+''+';expires=Mon,%2005%20Jul%202000%2000:00:00%20GMT;path=/;';})()
	javascript:(function(){document.cookie='XDEBUG_SESSION='+'PHPSTORM'+';path=/;';document.location.reload();document.cookie='XDEBUG_SESSION='+''+';expires=Mon,%2005%20Jul%202000%2000:00:00%20GMT;path=/;';})()
*/

// JQuery input format testing
/*
	$('#editme input').keyup(function(){
	var frmt=/([a-zA-Z]+\s){2}[a-zA-Z]+/i;
	if(frmt.test($(this).val())) {
	    $(this).css({border:'1px solid green'});
	    } else {
	    $(this).css({border:'1px solid red'});
	    }
	})
*/

// PHP. Cool data 'router'. To be used with huge data tables, instead of combining 'em row-vice.
/* 
	class DataPartitioner
	{
		private $data = array();
		private $routes = array();

		public function __construct()
		{

		}

		public function addDataPart($data)
		{
			if(count($data)==0)return;
			$keys = array_keys($data[0]);
			$this->data[]=$data;
			foreach ($keys as $blabla => $key) {
				$this->routes[$key] = & $this->data[count($this->data)-1];
			}
		}

		public function __invoke($id, $field)
		{
			return $this->get($id,$field);
		}

		public function get($id, $field)
		{
			return $this->routes[$field][$id][$field];
		}
	}

	$part1 = array(
		0 => array('name'=>'John', 'phone'=>'2219'),
		4 => array('name'=>'Dave', 'phone'=>'2311'),
		7 => array('name'=>'Sam', 'phone'=>'4210')
		);
	$part2 = array(
		0 => array('address'=>'bla bla st.1', 'age'=>'19'),
		4 => array('address'=>'bla bla st.2', 'age'=>'31'),
		7 => array('address'=>'bla bla st.3', 'age'=>'40')
		);
	$dpt = new DataPartitioner();
	$dpt->addDataPart($part1);
	$dpt->addDataPart($part2);

	$key=4;
	echo $dpt($key, 'name'). " ". $dpt($key, 'age') . " " . $dpt($key, 'phone') . " " . $dpt($key, 'address');
*/

